import pandas as pd
import numpy as np
from pandas import Series, DataFrame
from efficient_apriori import apriori
import time

# 导入文件
dataset = pd.read_csv('./Market_Basket_Optimisation.csv', header=None)
#print(dataset)

# 将数据放到transacations里
transacations = []
for i in range(0, dataset.shape[0]):
    temp = []
    for j in range(0,20):
        if str(dataset.values[i,j]) != 'nan':
            temp.append(str(dataset.values[i,j]))
    transacations.append(temp)

df = pd.DataFrame(columns=['Transaction','Item'])    
print(df)

print(len(transacations))

# 把transaccations数据放到DataFrame中，每行第一列为订单编号，第二列为对应的一个物品
for i in range(0,int(len(transacations))):
    for j in range(0,int(len(transacations[i]))):
        #print(transacations[i][j])
        df.loc[df.shape[0]]={'Transaction':i+1,'Item':transacations[i][j]}
#df.to_csv("Market_Basket_Optimisation_result.csv",index=False)


# 挖掘频繁项集与关联规则，使用efficient_apriori工具包
def rule1():
    start = time.time()
    itemset, rules = apriori(transacations, min_support=0.05, min_confidence=0.2)
    print("频繁项集：", itemset)
    print("关联规则：", rules)
    end = time.time()
    print ('用时：', end-start)

rule1()
print('_'*100)

# 使用mlxtend.frequent_patterns工具包
def encode_units(x):
    if x<= 0:
        return 0
    if x>=1:
        return 1

def rule2():
    from mlxtend.frequent_patterns import apriori
    from mlxtend.frequent_patterns import association_rules
    pd.options.display.max_columns=100
    start = time.time()
    hot_encoded_df = df.groupby(['Transaction','Item'])['Item'].count().unstack().reset_index().fillna(0).set_index('Transaction')
    hot_encoded_df = hot_encoded_df.applymap(encode_units)
    #print(hot_encoded_df)
    #hot_encoded_df.to_csv("Market_Basket_Optimisation_result2.csv",index=False)
    frequent_itemsets = apriori(hot_encoded_df, min_support=0.02, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric="lift", min_threshold=0.1)
    print("频繁项集：", frequent_itemsets.sort_values('support',ascending=False))
    print("关联规则：", rules.sort_values('lift',ascending=False))
    frequent_itemsets.sort_values('support',ascending=False).to_csv("Market_Basket_Optimisation_result_频繁项集.csv",index=False)
    rules.sort_values('lift',ascending=False).to_csv("Market_Basket_Optimisation_result_关联规则.csv",index=False)
    end = time.time()
    print("用时：", end-start)
rule2()
